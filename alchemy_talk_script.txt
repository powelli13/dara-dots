Me: C#/.NET dev by day, Elixir hobbyist for about a year and a half.
About Springbrook: We make Financial Administration and Accounting software for small to midsize city governments. We specialize in making UB meter reading, billing and customer's paying the bills easy and inter-connected.

Our Engineering department has a culture which always allows for growth and learning which I really enjoy. We have 10% were you can take 10% of your time in the week to learn tech things and keep growing. We have a book club which other departments join as well. And we also do occasional dev tech talks similar to this.

We are a .NET shop that works with C#.

Met Shannon through a mutual connection. Had a great time doing mock interviews with students and excited for the opportunity to present.

Phoenix: Elixir web framework
	- Channels are super easy way to 

Phaser: JavaScript 2D game framework that uses Canvas and WebGL to render in the browser

WebSockets: Slides won't work on my PC, could chat about them though

Presentation slides:

1. Origin
    - Oiriginally defined in RFC 6455 in 2011 

2. Purpose
    - Created to solve bidirectional communication issues with server
    - Issues before:
        - Server is forced to use one TCP connection for sending to client and a new one for each incoming client request
        - High unnecessary overhead of HTTP header on each message
        - Client forced to map outgoing connections to the incoming connection when tracking replies

2. Design Philosophy
    - Designed on the principle that there should be minimal framing 
        - the only framing that exists is to make the
            protocol frame-based instead of stream-based and to support a
            distinction between Unicode text and binary frames  
   - Any desired metadata would be layered on top of WebSocket by the application

3. Relationship to Network Stack
    - The WebSocket Protocol is an independent TCP-based protocol.  Its
   only relationship to HTTP is that its handshake is interpreted by
   HTTP servers as an Upgrade request.
   - Also sits at the Application Layer of the network stack

4. Using WebSockets
    - Modern multipurpose languages have libraries which make using web sockets easy. Signal R for ASP.NET, Phoenix for Elixir, Socket.io for Node.js and other languages etc.
    - Start in Javascript as a WebSocket. The WebSocket object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.
    - URI is either "ws" for port 80 and "wss" is port 443
    - Clientside can bind events
    - serverside can send and receive async, reading bytes into a buffer

5. Adaption and Uses
    - great for chat, games or anything that requires real time communication
	- today we'll take a look at how they are used in the Phoenix framework and how I used them to make a multiplayer game

6. Future of WebSockets
    - get online


Walk through code files
lobby_chat.js
	- generic lobby chat to easily make chat, player visibility and queue functionality available as games are added

lobby_chat_channel.ex
	- dispatches based on the game the lobby is for
	- makes it easier to share functionality

ttt_phaser_wrapper.js
	- connect to channel
	- .push and .on to send events
	- Phaser framework methods

pong_phaser_wrapper.js

ttt_game_channel.ex
	- receives state from client
	- pushes to listening clients

tic_tac_toe.ex
	- game logic
	- broadcasts are picked up by channels

TODO same files for Pong?